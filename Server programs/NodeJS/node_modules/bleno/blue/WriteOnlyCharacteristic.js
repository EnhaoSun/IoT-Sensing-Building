var util = require('util');
var bleno = require('..');
var Handel = require('./handelData');
var handel = new Handel();
var BlenoCharacteristic = bleno.Characteristic;
var insert = 0
const readline = require('readline');

readline.emitKeypressEvents(process.stdin);
process.stdin.setRawMode(true);
process.stdin.on('keypress', (str, key) => {
	if (key.ctrl && key.name === 'c') {
		process.exit();
	}
	else if (key.ctrl && key.name == 's'){
		console.log("Caught keyboard interruption");
		if(insert == 1)
			insert = 0;
		else 
			insert = 1;
		}
	else{
	}
});

function WriteOnlyCharacteristic() {
    WriteOnlyCharacteristic.super_.call(this,{
        uuid: '0001',
        properties: ['write'],
        descriptors: [
            new bleno.Descriptor({
                uuid:'2901',
                value: 'load accelerator data'
            })
        ]
    });
};

util.inherits(WriteOnlyCharacteristic, BlenoCharacteristic);


WriteOnlyCharacteristic.prototype.onWriteRequest = function(data, offset, withoutResponse, callback){
    var str = data.toString("ascii");
    if(str[0] == "x"){
        var ix = str.indexOf("x");
        var iy = str.indexOf("y");
        var iz = str.indexOf("z");

        var sx = str.substring(ix + 1, iy - 1);
        var sy = str.substring(iy + 1, iz - 1);
        var sz = str.substring(iz + 1, str.length - 1);

        var x = parseFloat(sx).toFixed(4);
        var y = parseFloat(sz).toFixed(4);
        var z = parseFloat(sz).toFixed(4);
        console.log('x: ' + x);
        console.log('y: ' + y);
        console.log('z: ' + z);
		if(insert == 1)	
        	handel.insert(x, y, z);
    }else{
        console.log('decision: ' + str);
    }
    callback(this.RESULT_SUCCESS);
}

module.exports = WriteOnlyCharacteristic;
